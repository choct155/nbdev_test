# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00_core.ipynb (unless otherwise specified).

__all__ = ['say_hello', 'fold', 'A', 'B', 'Foo', 'input_vals', 'foo_f']

# Cell
def say_hello(to: str) -> str:
    """
    Just a greeting
    """
    return f"Hello {to}!"

# Cell
from typing import Iterable, TypeVar, Callable


A = TypeVar("A")
B = TypeVar("B")

def fold(collection: Iterable[A], zero: B, f: Callable[[B, A], B]) -> B:
    """
    Fold is a generalization of reduce that crosses the type barrier.
    """
    out: B = zero
    for next_elem in collection:
        out: B = f(out, next_elem)
    return out

# Cell
from dataclasses import dataclass, field
from typing import List, Iterator, Callable


@dataclass
class Foo:
    in_val: int
    even: bool = field(default_factory=bool)

    def __post_init__(self) -> None:
        self.even = self.in_val % 2 == 0


input_vals: Iterator[int] = range(5)
foo_f: Callable[[List[Foo], int], List[Foo]] = lambda out, i: out + [Foo(i)]

fold(input_vals, [], foo_f)